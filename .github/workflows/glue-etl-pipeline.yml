name: Terraform + ETL Automation

on:
  push:
    branches:
      - pranav_CI/CD

env:
  AWS_REGION: us-east-1

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest
    outputs:
      bucket_name: ${{ steps.outputs_step.outputs.bucket_name }}
      glue_job_name: ${{ steps.outputs_step.outputs.glue_job_name }}
      glue_crawler_name: ${{ steps.outputs_step.outputs.glue_crawler_name }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: terraform
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve -input=false

      - name: Collect outputs
        id: outputs_step
        working-directory: terraform
        run: |
          echo "bucket_name=$(terraform output -raw resolved_bucket_name)" >> $GITHUB_OUTPUT
          echo "script_s3_path=$(terraform output -raw script_s3_path)" >> $GITHUB_OUTPUT
          echo "glue_job_name=$(terraform output -raw glue_job_name)" >> $GITHUB_OUTPUT
          echo "glue_crawler_name=$(terraform output -raw glue_crawler_name)" >> $GITHUB_OUTPUT

  run-etl:
    needs: terraform-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Start Glue Crawler
        id: start_crawler
        run: |
          CRAWLER_NAME="${{ needs.terraform-deploy.outputs.glue_crawler_name }}"
          echo "Starting crawler: $CRAWLER_NAME"
          aws glue start-crawler --name "$CRAWLER_NAME" || echo "start-crawler returned non-zero (may already be running)"

      - name: Start Glue Job (async)
        id: start_job
        run: |
          JOB_NAME="${{ needs.terraform-deploy.outputs.glue_job_name }}"
          echo "Starting job: $JOB_NAME"
          JOB_RUN_ID=$(aws glue start-job-run --job-name "$JOB_NAME" --query 'JobRunId' --output text) || { echo "Failed to start job"; exit 1; }
          echo "job_run_id=$JOB_RUN_ID" >> $GITHUB_OUTPUT

      - name: Wait for Glue Job completion (with timeout)
        run: |
          JOB_NAME="${{ needs.terraform-deploy.outputs.glue_job_name }}"
          JOB_RUN_ID="${{ steps.start_job.outputs.job_run_id }}"
          echo "Polling job $JOB_NAME run $JOB_RUN_ID"
          SECONDS=0
          TIMEOUT_SECONDS=$((60 * 30)) # 30 minutes max
          while true; do
            if [ $SECONDS -ge $TIMEOUT_SECONDS ]; then
              echo "Timeout waiting for Glue job (30m). Exiting with failure to avoid hanging."
              aws glue get-job-run --job-name "$JOB_NAME" --run-id "$JOB_RUN_ID" --query 'JobRun.JobRunState' --output text || true
              exit 1
            fi
            STATUS=$(aws glue get-job-run --job-name "$JOB_NAME" --run-id "$JOB_RUN_ID" --query 'JobRun.JobRunState' --output text)
            echo "Status: $STATUS (elapsed ${SECONDS}s)"
            if [ "$STATUS" = "SUCCEEDED" ]; then
              echo "Job succeeded."
              break
            elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "STOPPED" ]; then
              echo "Job failed or stopped."
              exit 1
            fi
            sleep 30
          done
#hello